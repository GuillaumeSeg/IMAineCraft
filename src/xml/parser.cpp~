#include <iostream>
#include <cstdlib>
#include <list>
#include "../../include/imac2gl3/shapes/Cube.hpp"
#include "../../include/imac2gl3/shapes/GLShapeInstance.hpp"
#include "../../include/xml/tinyxml.h"
#include "../../include/xml/parser.hpp"
#include "../../include/imac2gl3/shapes/Colline.hpp"
#include "../../include/xml/Univers.hpp"

void recupererXML(Univers *univ) {
	using namespace std;
	
	TiXmlDocument doc("data/univers.xml");
	if(!doc.LoadFile()){
   	cerr << "erreur lors du chargement" << endl;
   	cerr << "error #" << doc.ErrorId() << " : " << doc.ErrorDesc() << endl;
   	exit(1);
	}
	
	TiXmlHandle hdl(&doc);
	TiXmlElement *elem = hdl.FirstChildElement().Element();
	std::cout << "Univers" << std::endl;
	
	int a,b,c;
	elem->QueryIntAttribute("largeurMax", &a);
	elem->QueryIntAttribute("longueurMax", &b);
	elem->QueryIntAttribute("hauteurMax", &c);
	(*univ).setlargeurmax(a);
	(*univ).setlongeurmax(b);
	(*univ).sethauteurmax(c);
	
	elem = hdl.FirstChildElement("univers").FirstChildElement.Element();
	
	
	std::list<imac2gl3::GLShapeInstance>::iterator i;
	
	imac2gl3::Cube cube(1.f);
	if(!elem){
		cerr << "le noeud Ã  atteindre n'existe pas" << endl;
		exit(1);
	}
	
	while (elem){
		
		int tmplargeur;
		int tmplongueur;
		int tmpx;
		int tmpy;
		int tmpz;
		
		
		if(elem == hdl.FirstChildElement().FirstChildElement("colline").Element()) {
			
			std::cout << "Colline" << std::endl;
			
			//tmplargeur =  elem->Attribute("largeur").IntValue();
			elem->QueryIntAttribute ("largeur", &tmplargeur);
			//tmplongueur = elem->Attribute("longueur").IntValue();
			elem->QueryIntAttribute ("longueur", &tmplongueur);
			//tmpx = elem->Attribute("x").IntValue();
			elem->QueryIntAttribute ("x", &tmpx);
			//tmpy = elem->Attribute("y").IntValue();
			elem->QueryIntAttribute ("y", &tmpy);
			//tmpz = elem->Attribute("z").IntValue();
			elem->QueryIntAttribute ("z", &tmpz);
			
			
			Colline hill(tmplargeur, tmplongueur, elem->Attribute("type"), tmpx, tmpy, tmpz, *univ);
			/*std::cout << "testcolline2" << std::endl;
			(*univ).MergeList(hill.getListCube());
			std::cout << "testcolline3" << std::endl;
			for(i=hill.getListCube().begin(); i!=hill.getListCube().end(); ++i) {
				(*univ).PushCube(*i);
			}*/
		}
		if(elem == hdl.FirstChildElement().FirstChildElement("cube").Element()) {
			
			std::cout << "Cube" << std::endl;
			
			imac2gl3::GLShapeInstance cubeinstance(cube);
			elem->QueryIntAttribute("x", &cubeinstance.x);
			elem->QueryIntAttribute("y", &cubeinstance.y);
			elem->QueryIntAttribute("z", &cubeinstance.z);
			(*univ).PushCube(cubeinstance);
		
		}
		
		elem = elem->NextSiblingElement(); // iteration 
	}
		std::cout << (*univ).getList().size() << std::endl;
		for(i=(*univ).getList().begin(); i!=(*univ).getList().end(); ++i) {
				std::cout << "Instance Cube" << std::endl;
				std::cout << i->x << "  " << i->y << " " << i->z << std::endl;
    	}
	
}


